name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/${{ github.repository }}/userservice

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build without tests
        run: ./gradlew clean build -x test --no-daemon

      - name: Run Unit Tests
        run: ./gradlew test --no-daemon

  security-checks:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "userservice"
          format: "HTML"
          output: "reports"

      - name: Run SAST (CodeQL)
        uses: github/codeql-action/analyze@v2

  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: security-checks
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }}:latest ./userservice

      - name: Push Docker Image
        run: docker push ${{ env.IMAGE_NAME }}:latest

#   deploy-staging:
#     name: Deploy to Staging
#     runs-on: ubuntu-latest
#     needs: docker-build
#     steps:
#       - name: SSH into Staging Server
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.STAGING_HOST }}
#           username: ${{ secrets.STAGING_USER }}
#           key: ${{ secrets.STAGING_SSH_KEY }}
#           script: |
#             docker pull ${{ env.IMAGE_NAME }}:latest
#             docker-compose up -d --force-recreate

#   e2e-tests:
#     name: End-to-End Testing
#     runs-on: ubuntu-latest
#     needs: deploy-staging
#     steps:
#       - name: Run API Tests
#         uses: matt-ball/newman-action@v1
#         with:
#           collection: postman-collection.json
#           environment: postman-environment.json

#   deploy-production:
#     name: Deploy to Production
#     runs-on: ubuntu-latest
#     needs: e2e-tests
#     steps:
#       - name: SSH into Production Server
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.PROD_HOST }}
#           username: ${{ secrets.PROD_USER }}
#           key: ${{ secrets.PROD_SSH_KEY }}
#           script: |
#             docker pull ${{ env.IMAGE_NAME }}:latest
#             docker-compose up -d --force-recreate
