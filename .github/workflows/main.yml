name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/caettus/horizon-backend/userservice

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Give execute permission to Gradle wrapper
        run: chmod +x userservice/gradlew

      - name: Build without tests
        run: |
          cd userservice
          ./gradlew clean build -x test --no-daemon

      - name: Run Unit + Integration Tests (test profile)
        run: |
          cd userservice
          ./gradlew test -Dspring.profiles.active=test --no-daemon

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: userservice/build/reports/tests/test

  security-and-quality:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # ---------- CodeQL ----------
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java
          build-mode: manual

      - name: Build project for CodeQL
        run: |
          cd userservice
          ./gradlew clean build -x test --no-daemon

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          upload: false

      # ---------- OWASP Dependency Check ----------
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "userservice"
          format: "HTML"
          output: "reports"
          path: ''

      # ---------- Snyk ----------
      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Auth with Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk for dependency scan (userservice)
        run: |
          cd userservice
          snyk test --all-projects || true

#      # ---------- Semgrep ----------
#      - name: Run Semgrep for static analysis
#        uses: returntocorp/semgrep-action@v1
#        with:
#          config: "auto"

    # ---------- SonarCloud ----------
      - name: Run SonarQube analysis
        run: |
          ./gradlew clean build -x test sonarqube --warning-mode all --stacktrace --info \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=caettus \
            -Dsonar.gradle.skipCompile=true \
            --no-daemon



  docker-and-scan:
    name: Docker Build & Scan & Push
    runs-on: ubuntu-latest
    needs: security-and-quality
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }}:latest ./userservice

      # ---------- Trivy Scan ----------
      - name: Run Trivy to scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:latest
          format: 'table'

      - name: Push Docker Image
        run: docker push ${{ env.IMAGE_NAME }}:latest
