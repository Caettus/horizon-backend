name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  ORG_REPO_PATH: caettus/horizon-backend

# ─────────────────────────────────────────────────────────────
# 1. BUILD & TEST  (matrix over every service folder)
# ─────────────────────────────────────────────────────────────
jobs:
  build-and-test:
    name: Build & Test – ${{ matrix.service }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [userservice, eventservice, api-gateway, rsvpservice]

    services:
      rabbitmq:
        image: rabbitmq:3.13-management
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        # health‑check so the job waits until the broker is ready
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ matrix.service }}-${{ hashFiles(format('{0}/**/*.gradle*', matrix.service)) }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Debug Directory Structure
        run: ls -R ${{ matrix.service }}

      - name: Verify Gradle Wrapper Permissions
        run: ls -l ${{ matrix.service }}/gradlew

      - name: Give execute permission to Gradle wrapper
        run: chmod +x ${{ matrix.service }}/gradlew

      - name: Build without tests
        run: |
          cd ${{ matrix.service }}
          ./gradlew clean build -x test --no-daemon

      #      - name: Run Unit + Integration Tests
      #        run: |
      #          cd ${{ matrix.service }}
      #          ./gradlew test -Dspring.profiles.active=test --no-daemon
      #      TODO

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ matrix.service }}
          path: ${{ matrix.service }}/build/reports/tests/test

  # ─────────────────────────────────────────────────────────────
  # 2. SECURITY & CODE‑QUALITY
  # ─────────────────────────────────────────────────────────────
  security-and-quality:
    name: Security & Code Quality – ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: build-and-test
    strategy:
      matrix:
        service: [userservice, eventservice, api-gateway, rsvpservice]

    steps:
      - uses: actions/checkout@v3

      # -------- CodeQL ----------
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java
          build-mode: manual

      - name: Build project for CodeQL
        run: |
          cd ${{ matrix.service }}
          ./gradlew clean build -x test --no-daemon

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          upload: false

      # -------- OWASP Dependency Check ----------
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "${{ matrix.service }}"
          format: "HTML"
          output: "reports"
          path: ${{ matrix.service }}

      # -------- Snyk ----------
      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Auth with Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk dependency scan
        run: |
          cd ${{ matrix.service }}
          snyk test --all-projects || true   # never fail the pipeline

      - name: Make root gradlew executable
        run: chmod +x gradlew

  # ─────────────────────────────────────────────────────────────
  # 3. SONARCLOUD
  # ─────────────────────────────────────────────────────────────
  sonarcloud:
    name: SonarCloud Analysis (root build)
    runs-on: ubuntu-latest
    needs: security-and-quality
    if: ${{false}} # TODO

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Run SonarCloud analysis
        run: |
          ./gradlew clean build -x test sonarqube --warning-mode all --stacktrace --info \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=caettus \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.projectKey=Caettus_horizon-backend \
            -Dsonar.gradle.skipCompile=true \
            --no-daemon

  # ─────────────────────────────────────────────────────────────
  # 4. DOCKER BUILD, SCAN & PUSH  (per‑service)
  # ─────────────────────────────────────────────────────────────
  docker-and-scan:
    name: Docker Build & Scan – ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: security-and-quality
    strategy:
      matrix:
        service: [userservice, eventservice, api-gateway, rsvpservice]

    steps:
      - uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ${{ env.REGISTRY }} -u $GITHUB_ACTOR --password-stdin

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ env.REGISTRY }}/${{ env.ORG_REPO_PATH }}/${{ matrix.service }}:latest \
            ./${{ matrix.service }}

      # -------- Trivy Scan ----------
      - name: Run Trivy image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.ORG_REPO_PATH }}/${{ matrix.service }}:latest
          format: 'table'

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.ORG_REPO_PATH }}/${{ matrix.service }}:latest

      # -------- custom keycloak image ----------
      - name: Build Keycloak image
        run: docker build -t ghcr.io/caettus/keycloak-custom:latest ./keycloak

      - name: Push Keycloak image
        run: docker push ghcr.io/caettus/keycloak-custom:latest